---
import { Image } from "astro:assets";
import Card from "../shared/Card.astro";
import gradientOverlayBlue from "@assets/gradient-blue.png";
import gradientOverlayPurple from "@assets/gradient-purple.png";
import { getImageUrl } from "@lib/imageUtils";
import NotchArrow from "@components/shared/NotchArrow.astro";

interface CardData {
	title: string;
	subtitle?: string;
	description: string;
	icon?: string;
	backgroundImage?: {
		url: string;
		alternativeText: string;
	};
}

interface Props {
	zIndex: number;
	cards: CardData[];
	backgroundImage?: {
		url: string;
		alternativeText: string;
	};
	variant: "blue" | "purple";
	hasNotch: boolean;
	previousBlockHasNotch: boolean;
}

const strapiUrl = import.meta.env.STRAPI_URL;

const { zIndex, cards, backgroundImage, variant, hasNotch, previousBlockHasNotch } = Astro.props;

const imageUrl = getImageUrl(backgroundImage?.url, strapiUrl);
const gradientOverlay = variant === "blue" ? gradientOverlayBlue : gradientOverlayPurple;

const hasMultipleCards = cards?.length > 1;
const containerClass = hasMultipleCards 
  ? "grid grid-cols-1 lg:grid-cols-2 gap-12 items-start"
  : "flex justify-center";

const sectionId = `cards-${zIndex}`;
---

<section class=`relative overflow-hidden ${hasNotch ? 'pb-notch' : ''} ${previousBlockHasNotch ? 'mt-notch' : ''}` style={{
   zIndex: zIndex
}}>
	<div data-section-id={sectionId} class={`relative w-full py-48 mx-auto`} data-notch-border-color={hasNotch ? '#6336E4' : undefined}>
		{imageUrl && (
			<Image 
				src={imageUrl}
				alt={backgroundImage?.alternativeText || "Background"}
				class="absolute inset-0 w-full h-full object-cover -z-10 opacity-50"
				width="1920"
				height="1080"
				loading="lazy"
			/>
		)}
		<Image 
			src={gradientOverlay}
			alt=""
			class="absolute inset-0 w-full h-full object-cover z-5 mix-blend-screen"
			width="1920"
			height="1080"
			loading="lazy"
		/>
		
		<div class={`relative z-10 ${containerClass} max-w-screen-xl mx-auto px-16`}>
			{cards && cards.map((card) => (
				<Card
					title={card.title}
					subtitle={card.subtitle}
					description={card.description}
					icon={card.icon}
					backgroundImage={card.backgroundImage}
			/>
			))}
		</div>

		{hasNotch && (
			<NotchArrow color="#ffffff" />
		)}
	</div>
</section>
