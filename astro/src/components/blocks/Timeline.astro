---
import NotchArrow from "@components/shared/NotchArrow.astro";
import AvegaTitle from "@components/shared/AvegaTitle.astro";
import Card from "@components/shared/Card.astro";
import Arrow from "@components/shared/Arrow.astro";
import { configureMarkdown, parseMarkdown } from '@lib/markdown';
import { cn } from "@lib/cn";

interface CardData {
	title: string;
	subtitle?: string;
	description: string;
	icon?: string;
	backgroundImage?: {
		url: string;
		alternativeText: string;
	};
}

interface Props {
  zIndex: number;
	title: string;
  content: string;
  cards: CardData[];
  hasNotch: boolean;
  previousBlockHasNotch: boolean;
}


const { zIndex, title, content, cards, hasNotch, previousBlockHasNotch } = Astro.props;

// Configure marked to properly handle markdown
configureMarkdown();
const parsedContent = parseMarkdown(content);
---
<section class={cn("relative overflow-hidden", hasNotch && 'pb-notch', previousBlockHasNotch && 'mt-notch')} style={`z-index: ${zIndex}`}>
  <div class={`relative bg-[#191958]`} data-notch-border-color={hasNotch ? '#ffffff' : undefined}>
    <div class="absolute top-0 left-24 w-[32rem] h-[32rem] rounded-full filter blur-3xl blur-circle"></div>

    <div class="relative mx-auto max-w-screen-xl px-8 py-48">
      {title && (
        <AvegaTitle title={title} level={4} />
      )}

      <div class="mt-4 prose prose-strong:font-bold max-w-none prose-invert">
        <div set:html={parsedContent} />
      </div>

      <div class="grid grid-cols-1 xl:grid-cols-5 gap-16 xl:gap-8 items-center xl:items-start mt-10">
        {cards.map((card, index) => (
          <div class="relative h-full flex justify-center items-center">
            <Card
              title={card.title}
              titleLevel={3}
              titleColor="#ffffff"
              titleClassName="!text-2xl leading-normal mt-4"
              subtitle={card.subtitle}
              subtitleClassName="uppercase mt-3 text-white/50"
              description={card.description}
              icon={card.icon}
              backgroundImage={card.backgroundImage}
              className="px-2 py-6 bg-white/10"
            />

            {index !== cards.length - 1 && (
              <div class="absolute rotate-90 translate-x-1/2 right-1/2 -bottom-10 xl:rotate-0 xl:-right-7 xl:bottom-1/2 xl:translate-x-0 xl:translate-y-1/2">
                <Arrow />
              </div>
            )}
          </div>
        ))}
      </div>
    </div>

    {hasNotch && (
      <NotchArrow color={"#ffffff"} />
   )}
  </div>
</section>

