---
import AvegaTitle from "@components/shared/AvegaTitle.astro";
import Button from "@components/shared/Button.astro";
import { getImageUrl } from "@lib/imageUtils";
import { marked } from "marked";

import { Image } from "astro:assets";
import NotchArrow from "@components/shared/NotchArrow.astro";

interface Props {
	title: string;
	description: string;
	backgroundImage: {
		url: string;
		alternativeText: string;
	};
	button: {
		title: string;
		url: string;
		target: "_blank" | "_self" | "_parent" | "_top";
	};
   hasBlockTransition: boolean;
}
const strapiUrl = import.meta.env.STRAPI_URL;

const { title, description, backgroundImage, button, hasBlockTransition } = Astro.props;

const imageUrl = getImageUrl(backgroundImage.url, strapiUrl);
// Configure marked to properly handle markdown
marked.setOptions({
  breaks: true,
  gfm: true // GitHub Flavored Markdown
});

const parsedContent = description ? marked.parse(description) : null;

---
<section class="h-screen overflow-hidden relative flex flex-col items-center justify-center block-transition">
   {imageUrl && (
     <Image src={imageUrl}
        alt=""
        class="absolute inset-0 w-full h-full object-cover z-0"
        width="1920"
        height="1080"
        loading="eager"
     />
   )}
   <div class="flex flex-col items-start justify-center h-full w-full z-10 px-8 md:px-36">
      <AvegaTitle title={title} />
      <div class="text-white text-start mt-2 md:mt-6 text-md md:text-md max-w-3xl relative z-10">
         <article set:html={parsedContent} />
       </div>
      {button && (<div class="mt-18">
         <Button 
            text={button.title}
            target={button.target}
            url={button.url}
         />
      </div>)}
   </div>

   {hasBlockTransition && (
      <NotchArrow color="#ffffff" />
   )}
</section>

<script>
   import { applySectionClipPath } from "@lib/clipPath";

   const section = document.querySelector('.block-transition') as HTMLElement;
   applySectionClipPath(section);
</script>