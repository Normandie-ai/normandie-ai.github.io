---
import AvegaTitle from "../shared/AvegaTitle.astro";
import StatCard from "../shared/StatCard.astro";
import { marked } from 'marked';
import NotchArrow from "@components/shared/NotchArrow.astro";

interface StatCardData {
  icon: string;
  title: string;
  subtitle?: string;
}

interface Props {
  zIndex: number;
  title: string;
  content: string;
  stats: StatCardData[];
  ctaText?: string;
  ctaLink?: string;
  variant?: "default" | "dark";
  hasNotch: boolean;
  previousBlockHasNotch: boolean;
}

const { zIndex, title, content, stats = [], ctaText, ctaLink, variant = "dark", hasNotch, previousBlockHasNotch } = Astro.props;

// Configure marked for markdown parsing
marked.setOptions({
  breaks: true,
  gfm: true
});

const parsedContent = content ? marked.parse(content) : null;
const sectionStyle = variant === "dark" ? `background-color: #191958` : 'white';
const statsCount = stats?.length || 0;

// Define grid layout configurations
const gridLayouts = {
  1: { 
    container: "grid grid-cols-1 gap-4 mb-8 max-w-md mx-auto",
    pattern: [1]
  },
  2: { 
    container: "grid grid-cols-1 sm:grid-cols-2 gap-4 mb-8 max-w-2xl mx-auto",
    pattern: [1, 1]
  },
  3: { 
    container: "grid grid-cols-3 gap-4 mb-8",
    pattern: [2, 1, 3] // 2-1-3 pattern
  },
  4: { 
    container: "grid grid-cols-3 gap-4 mb-8",
    pattern: [2, 1, 1, 2] // 2-1-1-2 pattern
  },
  5: { 
    container: "grid grid-cols-3 gap-4 mb-8",
    pattern: [2, 1, 1, 1, 2] // 2-1-1-1-2 pattern
  },
  6: { 
    container: "grid grid-cols-3 gap-4 mb-8",
    pattern: [2, 1, 1, 2, 2, 1] // 2-1-1-2-2-1 pattern
  },
  default: { 
    container: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8",
    pattern: []
  }
};

const currentLayout = gridLayouts[statsCount as keyof typeof gridLayouts] || gridLayouts.default;

const sectionId = `stats-${zIndex}`;
---

<style>
  .blur-circle {
    background: #4863B7;
    opacity: 0.7;
  }
</style>

<section class={`relative overflow-hidden ${hasNotch ? 'pb-notch' : ''} ${previousBlockHasNotch ? 'mt-notch' : ''}`} style={{
  zIndex: zIndex
}}>
  <div data-section-id={sectionId} class="relative" style={sectionStyle}>
    <!-- Decorative blurred circles for dark variant -->
    {variant === "dark" && (
      <div class="absolute top-0 left-24 w-[32rem] h-[32rem] rounded-full filter blur-3xl blur-circle"></div>
    )}
    
    <div class="mx-auto max-w-screen-xl px-4 py-24 sm:px-6 lg:px-8 relative z-10">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 items-start">
        <!-- Statistics Cards Section -->
        <div class="order-1 lg:order-1">
          <div class={currentLayout.container}>
            {stats.map((stat, index) => {
              const colSpan = currentLayout.pattern.length > 0 
                ? currentLayout.pattern[index] 
                : 1;
              
              return (
                <StatCard 
                  icon={stat.icon}
                  title={stat.title}
                  subtitle={stat.subtitle}
                  colSpan={colSpan}
                  variant={variant}
                />
              );
            })}
          </div>
        </div>

        <!-- Content Section -->
        <div class="order-2 lg:order-2">
          <div class="max-w-lg md:max-w-none">
            {title && (
              <AvegaTitle title={title} level={4} />
            )}

            <div class="mt-4 prose prose-strong:font-bold max-w-none prose-invert">
              <div set:html={parsedContent} />
            </div>

            {ctaText && (
              <div class="flex items-center gap-4">
                <a 
                  href={ctaLink || "#"} 
                  class="inline-flex items-center px-6 py-3 bg-white text-[#191958] rounded-full font-semibold hover:bg-opacity-90 transition-all"
                >
                  {ctaText}
                </a>
                <a 
                  href="https://linkedin.com" 
                  target="_blank" 
                  rel="noopener noreferrer" 
                  class="inline-flex items-center justify-center w-12 h-12 bg-white bg-opacity-20 rounded-full hover:bg-opacity-30 transition-all"
                >
                  <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                  </svg>
                </a>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>

    {hasNotch && (
      <NotchArrow color="#ffffff" />
   )}
  </div>
</section> 

{hasNotch && (
	<script define:vars={{ sectionId }}>
		const section = document.querySelector(`[data-section-id="${sectionId}"]`);
		if (section) {
		import('/src/lib/clipPath').then(({ applySectionClipPathWithBorder }) => {
			applySectionClipPathWithBorder({
			section,
			borderColor: "#1B1C5D",
			});
		});
		}
	</script>
)}