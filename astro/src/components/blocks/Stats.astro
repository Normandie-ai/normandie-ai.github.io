---
import Button from "@components/shared/Button.astro";
import NotchArrow from "@components/shared/NotchArrow.astro";
import AvegaTitle from "../shared/AvegaTitle.astro";
import Linkedin from "@components/shared/icons/linkedin.astro";
import { configureMarkdown, parseMarkdown } from "@lib/markdown";
import Card from "../shared/Card.astro";
import { cn } from "@lib/cn";

interface CardData {
	title: string;
	subtitle?: string;
	description: string;
	icon?: {
		url: string;
		alternativeText: string;
	};
	iconSize?: "sm" | "md" | "lg";
	backgroundImage?: {
		url: string;
		alternativeText: string;
	};
}

interface Props {
    anchor?: string;
    zIndex: number;
    title: string;
    content: string;
    stats: CardData[];
    ctaText?: string;
    ctaLink?: string;
    variant?: "default" | "dark";
    hasNotch: boolean;
    previousBlockHasNotch: boolean;
}

const { anchor, zIndex, title, content, stats = [], ctaText, ctaLink, variant = "dark", hasNotch, previousBlockHasNotch } = Astro.props;

// Configure marked for markdown parsing
configureMarkdown();
const parsedContent = parseMarkdown(content);

const sectionStyle = variant === "dark" ? "background-color: #191958" : "white";
const statsCount = stats?.length || 0;

// Define grid layout configurations
const gridLayouts = {
    1: {
        container: "grid grid-cols-1 gap-4 mb-8 max-w-md mx-auto",
        pattern: [1],
    },
    2: {
        container: "grid grid-cols-1 sm:grid-cols-2 gap-4 mb-8 max-w-2xl mx-auto",
        pattern: [1, 1],
    },
    3: {
        container: "grid grid-cols-3 gap-4 mb-8",
        pattern: [2, 1, 3], // 2-1-3 pattern
    },
    4: {
        container: "grid grid-cols-3 gap-4 mb-8",
        pattern: [2, 1, 1, 2], // 2-1-1-2 pattern
    },
    5: {
        container: "grid grid-cols-3 gap-4 mb-8",
        pattern: [2, 1, 1, 1, 2], // 2-1-1-1-2 pattern
    },
    6: {
        container: "grid grid-cols-3 gap-4 mb-8",
        pattern: [2, 1, 1, 2, 2, 1], // 2-1-1-2-2-1 pattern
    },
    default: {
        container: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8",
        pattern: [],
    },
};

const currentLayout = gridLayouts[statsCount as keyof typeof gridLayouts] || gridLayouts.default;
---
<section id={anchor} class={`relative overflow-hidden ${hasNotch ? 'pb-notch' : ''} ${previousBlockHasNotch ? 'mt-notch' : ''}`} style={{
  zIndex: zIndex
}}>
  <div class={`relative`} style={sectionStyle} data-notch-border-color={hasNotch ? '#1B1C5D' : undefined}>
    <!-- Decorative blurred circles for dark variant -->
    {variant === "dark" && (
      <div class="absolute top-0 left-24 w-[32rem] h-[32rem] rounded-full filter blur-3xl blur-circle"></div>
    )}
    
    <div class="mx-auto max-w-screen-xl px-8 py-24 xs:py-32 md:py-48 relative z-10">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 items-start">
        <!-- Statistics Cards Section -->
        <div class="hidden xs:block order-1 lg:order-1">
          <div class={currentLayout.container}>
            {stats.map((stat, index) => {
              const colSpan = currentLayout.pattern.length > 0 
                ? currentLayout.pattern[index] 
                : 1;

              return (
                <Card 
                  icon={stat.icon}
                  title={stat.title}
                  subtitle={stat.subtitle}
                  description={stat.description}
                  iconSize={stat.iconSize}
                  backgroundImage={stat.backgroundImage}
                  className={cn("p-6 bg-white/10 hover:bg-white/20 transition-all duration-300","col-span-1", colSpan === 2 && "col-span-2", colSpan === 3 && "col-span-3")}
                  titleClassName="!text-xl !text-shadow-none maax font-bold mt-3"
                />
              );
            })}
          </div>
        </div>

        <!-- Content Section -->
        <div class="order-2 lg:order-2">
          <div class="max-w-lg md:max-w-none">
            {title && (
              <AvegaTitle title={title} level={4} className="mt-0 xs:mt-4" />
            )}

            <div class="mt-4 prose prose-strong:font-bold max-w-none prose-invert">
              <div set:html={parsedContent} />
            </div>

            {ctaText && (
              <div class="flex items-center gap-4">
                <Button 
                  variant="outline"
                  text={ctaText}
                  target={ctaLink ? "_blank" : "_self"}
                  url={ctaLink ?? ""}
                />

                <a href="https://www.linkedin.com/company/normandie-ai/" target="_blank" class="border-[#ffffff] border-1 font-bold size-11 flex items-center justify-center rounded-md flex-shrink-0 hover:bg-white/10">
                  <Linkedin color="#ffffff" />
                </a>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>

    {hasNotch && (
      <NotchArrow color="#ffffff" />
   )}
  </div>
</section> 
