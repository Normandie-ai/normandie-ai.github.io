---
import NotchArrow from "@components/shared/NotchArrow.astro";
import AvegaTitle from "@components/shared/AvegaTitle.astro";
import Card from "@components/shared/Card.astro";
import { configureMarkdown, parseMarkdown } from "@lib/markdown";

interface CardData {
	title: string;
	subtitle?: string;
	description: string;
	icon?: {
		url: string;
		alternativeText: string;
	};
	iconSize?: "sm" | "md" | "lg";
	backgroundImage?: {
		url: string;
		alternativeText: string;
	};
}

interface Props {
  anchor?: string;
  zIndex: number;
	title: string;
  content: string;
  cards: CardData[];
  hasNotch: boolean;
  previousBlockHasNotch: boolean;
}

const { anchor, zIndex, title, content, cards, hasNotch, previousBlockHasNotch } = Astro.props;

// Configure marked to properly handle markdown
configureMarkdown();
const parsedContent = parseMarkdown(content);
---
<section id={anchor} style={`z-index: ${zIndex}`} class=`relative overflow-hidden ${hasNotch ? 'pb-notch' : ''} ${previousBlockHasNotch ? 'mt-notch' : ''}` data-header-color={true}>
  <div class={`relative bg-white`} data-notch-border-color={hasNotch ? '#ffffff' : undefined}>
    <div class="mx-auto max-w-screen-xl px-6 xs:px-8 py-24 xs:py-32 md:py-48">
      {title && (
        <AvegaTitle title={title} level={4} color="#725CFA" />
      )}

      <div class="mt-4 prose prose-strong:font-bold max-w-none">
        <div set:html={parsedContent} />
      </div>

      <div class="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-12 items-start mt-10">
        {cards.map((card) => (
          <Card
            title={card.title}
            subtitle={card.subtitle}
            description={card.description}
            icon={card.icon}
            iconSize={card.iconSize}
            iconClassName={"size-16"}
            backgroundImage={card.backgroundImage}
          />
        ))}
      </div>
    </div>

    {hasNotch && (
      <NotchArrow color={"#7666FC"} />
   )}
  </div>
</section>
