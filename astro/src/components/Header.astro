---
import { Image } from "astro:assets";
import fetchApi from "@lib/strapi";
import { getImageUrl, getLinkUrl } from "@lib/imageUtils";
import DayCounter from "@components/shared/DayCounter.astro";

interface NavbarItem {
	title: string;
	url: string;
	target?: string;
}

interface Navigation {
	logoWhite?: {
		url: string;
		alternativeText: string;
	};
	logoColor?: {
		url: string;
		alternativeText: string;
	};
	navbarItems?: NavbarItem[];
}
const strapiUrl = import.meta.env.STRAPI_URL;
const baseUrl = import.meta.env.BASE_URL;

// Fetch navigation data with error handling
let navigationData: Navigation | null = null;
try {
	navigationData = await fetchApi({
		endpoint: "/navigation?populate=*",
		wrappedByKey: "data",
	});
} catch (error) {
	console.warn("Failed to fetch navigation data:", error);
}

// Destructure with fallback values
const logoWhite = navigationData?.logoWhite || null;
const logoColor = navigationData?.logoColor || null;
const navbarItems = navigationData?.navbarItems || [];

const logoWhiteUrl = getImageUrl(logoWhite?.url, strapiUrl);
const logoColorUrl = getImageUrl(logoColor?.url, strapiUrl);


---

<header class="absolute md:fixed text-slate-100 body-font z-20 w-full">
   <div class="max-w-screen-xl mx-auto flex flex-wrap p-5 flex-row items-center justify-between px-8 py-12">
     <a href={baseUrl} class="relative flex title-font font-medium items-center h-[102px] w-[204px]">
      {logoWhiteUrl && (
        <Image src={logoWhiteUrl}
            id="logo-white"
            alt={logoWhite?.alternativeText || "Logo"}
            width="204"
            height="102"
            loading="eager"
            class="h-full w-full object-contain absolute top-0 left-0"
        />
      )} 

      {logoColorUrl && (
        <Image src={logoColorUrl}
            id="logo-color"
            alt={logoColor?.alternativeText || "Logo"}
            width="204"
            height="102"
            loading="eager"
            aria-hidden="true"
            class="h-full w-full object-contain absolute top-0 left-0 opacity-0 pointer-events-none"
        />
      )}

      {!(logoWhiteUrl && logoColorUrl) && (
        <div class="w-[204px] h-[102px] bg-white/10 rounded flex items-center justify-center">
          <span class="text-white text-lg font-semibold">Logo</span>
        </div>
      )}
     </a>

     <nav class="hidden ml-auto md:flex gap-8 items-center">
      {navbarItems?.map((item: NavbarItem) => {
        const href = getLinkUrl(item.url, baseUrl);
        return (
          <a
            href={href}
            class="font-bold text-white"
            target={item.target ? item.target : '_self'}
          >
            {item.title}
          </a>
        )
      })} 
    </nav>

    <DayCounter targetDate="2025-12-11" className="ml-8" />
   </div>
 </header>